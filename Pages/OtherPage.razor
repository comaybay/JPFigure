@page "/other"
@using JPFigure.Entities.Enums
@using JPFigure.Repositories.Data.Filters
@inject FigureRepository FigureRepository;
@inject ManufactureRepository ManufactureRepository;
@inject NavigationManager Navigation

<NavBar></NavBar>
<div class="banner_ctn">
    <img src="Image/other_banner.png">
</div>
<div class="sort_ctn">
    <h2>Orther Figures</h2>
    <div class="select_container">
        <img src="Image/sort.png">
        <select class="sort" @onchange="@(e => {
				filter.OrderNewest = e.Value?.ToString() == "oldest" ? false : true;
				ApplyFilter();
			})">
            <option value="news">Mới Nhất</option>
            <option value="oldest">Cũ Nhất</option>
        </select>
    </div>
</div>
<div class="filter_ctn">
    <div>
        <img src="Image/filter.png">
        <p>Phân Loại</p>
    </div>
    <div>
        <img src="Image/brand-image.png">
        <p>Thương Hiệu</p>
        <SelectWithSearch Options=@brandOptions 
			SelectedOptionChanged=@(async o => {
				filter.ManufactureId = o != null ? int.Parse(o.Value) : null;
						  currentPage = 1;
						  ApplyFilter();
			}) />
    </div>
    <div>
        <img src="Image/price-tag.png">
        <p>Giá Tiền</p>
        <SelectWithSearch
			Options=@(new() {
				new() {DisplayText = "Dưới 1.000.000₫", Value="1"},
				new() {DisplayText = "1.000.000₫ - 2.000.000₫", Value="2"},
				new() {DisplayText = "2.000.000₫ - 3.000.000₫", Value="3"},
				new() {DisplayText = "3.000.000₫ - 4.000.000₫", Value="4"},
				new() {DisplayText = "Trên 4.000.000₫", Value="5"}
			})
			SelectedOptionChanged=@(async o => {
				filter.PriceRange = (o?.Value) switch {
						"1" => (null, 1000000),
						"2" => (1000000, 2000000),
						"3" => (2000000, 3000000),
						"4" => (3000000, 4000000),
						"5" => (4000000, null),
						_ => (null, null),
					};
				currentPage = 1;
				ApplyFilter();
			}) />
    </div>
</div>
<div class="product_ctn">
    <div class="products">
        @if (figures != null)
        {
            @for (int i = 0; i < figures.Items.Count; i++)
            {
                <div class="product_item">
                    <div class="product_thumb">
                        <a href="">
                            <img src=@figures.Items[i].Images[0] alt="">
                        </a>
                        <a href="" class="add_cart">
                            <span>Add To Cart</span>
                            <img src="Image/cart-white.png">
                        </a>
                    </div>
                    <div class="product_name_ctn">
                        <a href="" class="product_name">@figures.Items[i].ProductName</a>
                    </div>
                    <div class="product_price">@figures.Items[i].Price</div>
                </div>
            }
        }
    </div>
</div>
@if (figures != null && figures.NumberOfPages > 0)
{
    <div class="page_navigate_ctn">
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous" @onclick=@(e => {
                   currentPage = 1;
                   ApplyFilter();
                   })>
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only"></span>
                    </a>
                </li>
                @for (int i = Math.Max(1, Math.Min(figures.PageNumber - 1, figures.NumberOfPages - 5)); i <= Math.Min(Math.Max(3, 2 + figures.PageNumber - 1), figures.NumberOfPages - 4 + 1); i++)
                {
                    var index = i;
                    <li class="page-item">
                        <a class="page-link" @onclick=@(e => {
                   currentPage = index;
                   ApplyFilter();
                   })>
                            @index
                        </a>
                    </li>
                }
                @if (figures.NumberOfPages - (figures.PageNumber - 1) + 1 > 6)
                {
                    <li class="page-item"><span class="page-link">...</span></li>
                }
                @for (int i = Math.Min(figures.PageNumber + 3, figures.NumberOfPages - 3 + 1); i <= figures.NumberOfPages; i++)
                {
                    var index = i;
                    <li class="page-item">
                        <a class="page-link" @onclick=@(e => {
                   currentPage = index;
                   ApplyFilter();
                   })>
                            @index
                        </a>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next"
                   @onclick=@(e => {
                   currentPage = figures.NumberOfPages;
                   ApplyFilter();
                   })>
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only"></span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
}
<BottomBar></BottomBar>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Other { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Brand { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PriceFrom { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PriceTo { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Order { get; set; }

    private Pagination<Models.Figure>? figures = null;

    private List<SelectWithSearch.Option> brandOptions = new();
    private FigureFilter filter = new();
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        brandOptions = (await ManufactureRepository.GetAllManufactures()).Select(
            c => new SelectWithSearch.Option()
                {
                    Value = c.Id.ToString(),
                    DisplayText = c.Name
                }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        filter = new()
            {
                ManufactureId = Brand,
                PriceRange = (PriceFrom, PriceTo),
                OrderNewest = Order != null && Order == "asc" ? false : true,
            };

        figures = await FigureRepository.GetOtherFigures(filter, Math.Max(1, Page), 2);
    }

    /// Áp dụng filter để tìm figure, gọi hàm này khi có thay đổi về lựa chọn lọc hay lựa chọn sắp xếp
    private void ApplyFilter()
    {
        string paramBrand = filter.ManufactureId != null ? $"&brand={filter.ManufactureId}" : "";
        string paramPriceFrom = filter.PriceRange.from != null ? $"&pricefrom={filter.PriceRange.from}" : "";
        string paramPriceTo = filter.PriceRange.to != null ? $"&priceto={filter.PriceRange.to}" : "";
        string paramOrder = filter.OrderNewest == false ? $"&order=asc" : "";
        Navigation.NavigateTo($"/other?page={currentPage}{paramBrand}{paramPriceFrom}{paramPriceTo}{paramOrder}");
    }
}
