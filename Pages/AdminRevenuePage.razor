@page "/admin/revenue"
@inject JPFigureContext context
@inject Faker Faker
@inject IToastService toastService
@using ChartJs.Blazor.BarChart
@using Microsoft.EntityFrameworkCore;

<div class="top_ctn">
	<h4>Tổng Lợi Nhuận: @String.Format("{0:n0}", total)₫ VND</h4>
    <div class="select_ctn" style="display: flex">
        <h4>Năm: </h4>
        <input type="number" class="year_input" @bind=_year/>
        <input type="submit" class="year_submit" value="Search" @onclick=Search/>
		<div>
			<button style="color:white; background-color:crimson" @onclick=GenerateData>Tạo dữ liệu ngẫu nhiêu</button>
		</div>
    </div>
</div>
	
<div class="chart_ctn">
    <div class="chart">
        <Chart Config="barConfig"></Chart>
    </div>
</div>

<div class="table_ctn">
    <div class="table">
        <label>Chi tiết doanh thu</label>
        <table>
			 <tr>
				<th>Id đơn hàng</th>
                <th>Thời Gian</th>
				<th>Id Khách hàng</th>
				<th>Tên khách hàng</th>
				<th>Id sản phẩm</th>
				<th>Tên sản phẩm</th>
				<th>Giá sản phẩm</th>
				<th>Số lượng</th>
				<th>Thành tiền</th>
            </tr>
			@if(orders != null)
			{
				
			@foreach (var order in orders)
			{
				@foreach (var detail in order.OrderDetails)
				{
					<tr>
						<td style="font:bold">@detail.Id</td>
						<td>@order.Date.ToString("G")</td>
						<td>@order.User.Id</td>
						<td>@order.User.Name</td>
						<td>@detail.FigureId</td>
						<td>@detail.Figure.ProductName</td>
						<td>@detail.Figure.Price</td>
						<td>@detail.Quantity</td>
						<td style="color:crimson">@((detail.Figure.Price * detail.Quantity).ToString("#,##0"))₫</td>
					</tr>
				}
				}
			}
        </table>
    </div>
</div>
@code {
	private BarConfig barConfig = new BarConfig();
	private int _year;
	private List<Order>? orders = null;
	private long total;

	protected override async Task OnInitializedAsync()
	{
		foreach (var month1 in new[] { "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
										"Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12" })
		{
			barConfig.Data.Labels.Add(month1);
		}

		_year = DateTime.Now.Year;
		await Search();
	}

	private async Task Search()
	{
		await ConfigureBarChart();
	}

	private async Task ConfigureBarChart()
	{
		barConfig.Options = new BarOptions
                {
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Doanh Thu"
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    BeginAtZero = true,
                                }
                            }
                        }
                    },
                    Responsive = true
            };

		orders = await context.Orders.Where(o => o.Date.Year == _year).Include(o => o.User).Include(o => o.OrderDetails).ThenInclude(o => o.Figure).OrderBy(o => o.Date).ToListAsync();

		var rev = await (from o in context.Orders.Where(o => o.Date.Year == _year).Include(o => o.OrderDetails).ThenInclude(o => o.Figure)
							group o by o.Date.Month into g
							select new {Month = g.Key, Rev = g.SelectMany(o => o.OrderDetails).Sum(od => (long)od.Figure.Price * od.Quantity)}).ToListAsync();
		total = rev.Select(r => r.Rev).Sum();
		var x = new List<long>();
		for (int i =1; i <= 12; i++)
		{
			if (rev.Find(r => r.Month == i) == null)
			{
				x.Add(0);
			}
			else x.Add(rev.Find(r => r.Month == i).Rev);
		}

		var dataset = new BarDataset<long>(x)
		{
            Label = "Bảng doanh thu",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
                ColorUtil.ColorHexString(252, 118, 106),
                ColorUtil.ColorHexString(91, 132, 177),
            }

        };
		barConfig.Data.Datasets.Clear();
		barConfig.Data.Datasets.Add(dataset);
	}

	private async Task GenerateData()
	{
		if (_year >= DateTime.Now.Year)
		{
			toastService.ShowError("Không thể tạo dữ liệu cho năm hiện tại hoặc tương lai");
			return;
		}


		await Faker.AddRandomOrders(_year);
		await Search();
		toastService.ShowSuccess("Tạo dữ liệu thành công");
	}
}
