@page "/scalefigure"
@using JPFigure.Entities.Enums
@using JPFigure.Entities;
@using JPFigure.Repositories.Data.Filters
@inject FigureRepository FigureRepository;
@inject ManufactureRepository ManufactureRepository;
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<NavBar></NavBar>
<div class="banner_ctn">
    <img src="Image/scale_figure_banner.png">
</div>
<div class="sort_ctn">
    <h2>Scale Figure</h2>
	
    <div class="select_container">
        <img src="Image/sort.png">
        <select class="sort" @onchange="@(e => {
				filter.OrderNewest = e.Value?.ToString() == "oldest" ? false : true;
				ApplyFilter();
			})">
			<option selected=@(filter.OrderNewest==true) value="news">Mới Nhất</option>
			<option selected=@(filter.OrderNewest==false) value="oldest">Cũ Nhất</option>
        </select>
    </div>
</div>
<div class="filter_ctn">
    <div>
        <img src="Image/filter.png">
        <p>Phân Loại</p>
    </div>
	@if (brands.Count > 0)
	{
		
	<div>
        <img src="Image/brand-image.png">
        <p>Thương Hiệu</p>
		<SelectWithSearch Options=@brandOptions
						  PlaceHolder=@(brands.Where(b => b.Id == Brand).FirstOrDefault()?.Name)
						  SelectedOptionChanged=@(async o => {
						  filter.ManufactureId = o != null ? int.Parse(o.Value) : null;
						  currentPage = 1;
						  ApplyFilter();
						  }) />
    </div>
	}
    <div>
        <img src="Image/price-tag.png">
        <p>Giá Tiền</p>
		<SelectWithSearch 
			PlaceHolder=@((PriceFrom, PriceTo) switch {
				  (null, 1000000) => "Dưới 1.000.000₫",
						  (1000000, 2000000) => "1.000.000₫ - 2.000.000₫",
						  (2000000, 3000000) => "2.000.000₫ - 3.000.000₫",
						  (3000000, 4000000) => "3.000.000₫ - 4.000.000₫",
						  (4000000, null) => "Trên 4.000.000₫",
						  _ => null,
						  })
			Options=@(new() {
				new() {DisplayText = "Dưới 1.000.000₫", Value="1"},
				new() {DisplayText = "1.000.000₫ - 2.000.000₫", Value="2"},
				new() {DisplayText = "2.000.000₫ - 3.000.000₫", Value="3"},
				new() {DisplayText = "3.000.000₫ - 4.000.000₫", Value="4"},
				new() {DisplayText = "Trên 4.000.000₫", Value="5"}
			})
			SelectedOptionChanged=@(async o => {
				filter.PriceRange = (o?.Value) switch {
						"1" => (null, 1000000),
						"2" => (1000000, 2000000),
						"3" => (2000000, 3000000),
						"4" => (3000000, 4000000),
						"5" => (4000000, null),
						_ => (null, null),
					};
				currentPage = 1;
				ApplyFilter();
			}) />
    </div>
</div>
<div class="product_ctn">
    <div class="products">
		@if (figures != null) {
			@foreach (var (figure, i) in figures.Items.Select((figure, i) => (figure, i)))
			{
				<div class="product_item">
					<div class="product_thumb">
						<a href="/figure/@figure.Id">
								<img class="product_img" src=@figure.Images[0] alt="">
						</a>
						<div class="add_cart">
							<img src="Image/cart-white.png">
							<span>Add To Cart</span>
						</div>
					</div>
					<div class="product_name_ctn">
							<a href="/figure/@figure.Id" class="product_name">@figure.ProductName</a>
					</div>
						<div class="product_price">@figure.Price.ToString("#,##0")₫</div>
				</div>
			}
		}

    </div>
</div>
@if (figures != null && figures.NumberOfPages > 0) {
	<PageNumbers NumberOfPages=@figures.NumberOfPages Page=@currentPage PageChanged=@(val => {
			 currentPage= val;
			 ApplyFilter();
			 }) />
}

<BottomBar></BottomBar>

@code {
	//private string demoText { get; set; } 

	[Parameter]
	[SupplyParameterFromQuery]
	public int Page { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public int? Scale { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public int? Brand { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public int? PriceFrom { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public int? PriceTo { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? Order { get; set; }

	private Pagination<Models.ScaleFigure>? figures = null;

	private List<SelectWithSearch.Option> brandOptions = new();
	private ScaleFigureFilter filter = new();
	private int currentPage = 1;
	private List<Models.Manufacture> brands = new();

	protected override async Task OnInitializedAsync()
	{
		brands = await ManufactureRepository.GetAllManufactures();
		brandOptions = brands.Select(
			c => new SelectWithSearch.Option() {
				Value = c.Id.ToString(),
				DisplayText = c.Name
		}).ToList();
	}

	protected override async Task OnParametersSetAsync()
	{
		filter = new()
		{
			FigureScale = (FigureScale?)Scale,
			ManufactureId = Brand,
			PriceRange = (PriceFrom, PriceTo),
			OrderNewest = Order != null && Order == "asc" ? false : true,
		};

		figures = await FigureRepository.GetScaleFigures(filter, Math.Max(1, Page), 12);
	}

	/// Áp dụng filter để tìm figure, gọi hàm này khi có thay đổi về lựa chọn lọc hay lựa chọn sắp xếp
	private void ApplyFilter() {
		string paramBrand = filter.ManufactureId != null ? $"&brand={filter.ManufactureId}" : "";
		string paramScale = filter.FigureScale != null ? $"&scale={(int) filter.FigureScale}" : "";
		string paramPriceFrom = filter.PriceRange.from != null ? $"&pricefrom={filter.PriceRange.from}" : "";
		string paramPriceTo = filter.PriceRange.to != null ? $"&priceto={filter.PriceRange.to}" : "";
		string paramOrder = filter.OrderNewest == false ? $"&order=asc" : "";
		Navigation.NavigateTo($"/scalefigure?page={currentPage}{paramBrand}{paramScale}{paramPriceFrom}{paramPriceTo}{paramOrder}");
	}

	private void AddToCart(Models.ScaleFigure figure)
	{
		
	}
}
