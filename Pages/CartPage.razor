@page "/cart"
@using JPFigure.Entities;
@inject UserRepository userRepo;
@inject CartRepository cartRepo;
@inject NavigationManager _navigationManager
@inject JPFigureContext context
@inject IToastService toastService
<NavBar></NavBar>
<div class="title_ctn">
	<h3>Giỏ hàng của bạn</h3>
	<div></div>
</div>
@if (_notLogin)
{
	<h3 style="color: red; text-align: center; padding: 200px 20px">Hãy đăng nhập để xem giỏ hàng</h3>
}
else if (_cart != null)
{
	@if (_cart.CartDetails.Count == 0)
	{
		<a href="/scalefigure">
		<h3 style="text-align: center; margin: 200px 20px">Giỏ hàng trống, hãy mua hàng!</h3>
		</a>

	}
	else {
		<div class="content_ctn">
			<div class="left_content_ctn">
				@foreach (var (cartDetail, i) in _cart.CartDetails.Select((cd, i) => (cd, i)))
				{
					<div class="product_info_ctn">
						<div class="product_info_ctn_left">
							<img src="@cartDetail.Figure.Images[0]">
						</div>
						<div class="product_info_ctn_right">
							<label>@cartDetail.Figure.ProductName</label>
							<div style="display: flex; justify-content: space-between">
								<input style="width:50px" type="number" value=@cartDetail.Quantity min="1" max="99" disabled=@_loading @onchange=@((e) => FigureQuantityChanged(i,e.Value.ToString()))>
								<button class="delete_bt" @onclick=@(() => DeleteCartDetail(i))>
									<img src="Image/delete.png">
								</button>
							</div>
							<label>@String.Format("{0:n0}", cartDetail.Figure.Price)₫</label>
							<div style="display: flex;justify-content:space-between">
								<label>Thành tiền</label>
								<label style="color: red;">@String.Format("{0:n0}", cartDetail.Figure.Price * cartDetail.Quantity)₫</label>
							</div>
						</div>
					</div>
				}
			</div>
			<div class="right_content_ctn">
				<h4 class="bill_title">Thông tin đơn hàng</h4>
				<div style="display: flex;justify-content: space-between">
					<h4>Tổng tiền:</h4>
					<h4 style="color: red">@String.Format("{0:n0}", _cart.CartDetails.Select(cd => cd.Figure.Price * cd.Quantity).Sum())₫</h4>
				</div>
				<ul>
					<li>* Phí vận chuyển sẽ được tính ở trang thanh toán.</li>
					<li>* Bạn cũng có thể nhập mã giảm giá ở trang thanh toán.</li>
				</ul>
				<button @onclick=@OnPay disabled=@(_cart.CartDetails.Count == 0) class="pay_bt">THANH TOÁN</button>
				<div style="border-bottom: none;background-color:#d9edf7; padding:5px;height:80px; margin-bottom:0">
					<b>Chính sách mua hàng:</b>
					<p>
						Miễn phí ship cho đơn hàng từ <b>1.000.000₫</b> trở lên.
					</p>
				</div>
			</div>
		</div>
	}
}
<BottomBar></BottomBar>

@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }

	private Cart? _cart;
	private string? _userEmail;
	private bool _notLogin = false;
	private bool _loading = false;

	protected override async Task OnInitializedAsync()
	{
		_userEmail = (await AuthenticationState).User?.FindFirst(ClaimTypes.Email)?.Value;

		if (_userEmail != null)
		{
			_notLogin = false;
			_cart = await cartRepo.GetCart(_userEmail);
		}
		else
		{
			_notLogin = true;
			_cart = null;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await OnInitializedAsync();
	}

	private async Task FigureQuantityChanged(int index, string quantityStr)
	{
		_loading = true;
		var cartDetail = _cart.CartDetails[index];
		if (int.TryParse(quantityStr, out int quantity))
		{
			cartDetail.Quantity = quantity;
			await cartRepo.UpdateCartDetail(cartDetail);
		}
		_loading = false;
		StateHasChanged();
	}

	private async Task DeleteCartDetail(int index)
	{
		_loading = true;
		var cartDetail = _cart.CartDetails[index];
		await cartRepo.DeleteCartDetail(cartDetail);
		_loading = false;
		StateHasChanged();
	}

	private async Task OnPay()
	{
		var order = new Order()
			{
				Date = DateTime.Now,
				UserId = (await userRepo.GetUser(_userEmail)).Id,
			};

		await context.Orders.AddAsync(order);
		await context.SaveChangesAsync();

		context.OrderDetails.AddRange(_cart.CartDetails.Select(cd => new OrderDetail()
			{
				FigureId = cd.FigureId,
				OrderId = order.Id,
				Quantity = cd.Quantity,
			}
		));

		await cartRepo.DeleteCartDetails(_cart.CartDetails);

		toastService.ShowSuccess("Thanh toán thành công.");
	}
}