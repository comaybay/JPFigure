@page "/figure/{Id:int}";
@using JPFigure.Extensions;
@using Entities.Enums;
@inject FigureRepository figRepo;
@inject NavigationManager UriHelper
@inject CartRepository cartRepo;
@inject IToastService toastService
<NavBar></NavBar>
@if (figure != null) {
<div class="product_detail_ctn">
    <div class="left_ctn">
        <div class="sub_image_ctn">
		@foreach (var (img, i) in figure.Images.Select((img,i) => (img, i)))
		{
					@if (!string.IsNullOrEmpty(img))
					{
						
            <div class="small_image_ctn">
                <img src="@img" @onclick="() => OnclickImg(i)">
            </div>
					}
		}
        </div>
        <div class="main_image_ctn">
            <img src="@bigImgageSrc">
        </div>
    </div>
    <div class="right_ctn">
        <h1>@figure.ProductName</h1>
			<h4>@String.Format("{0:n0}", figure.Price)₫</h4>
        <div class="row">
            <input @bind-value=@quantity type="number" min="1">
				@if (user.FindFirst(ClaimTypes.Email)?.Value != null)
				{
				<button @onclick=@AddToCart class="btn">THÊM VÀO GIỎ</button>
				}
				else {
				<button class="btn" disabled style="background-color:gray; color: white; width:fit-content; padding: 6px">ĐĂNG NHẬP ĐỂ THÊM VÀO GIỎ HÀNG</button>
				}

        </div>
        <h3>THÔNG TIN SẢN PHẨM</h3>
        <p>@figure.ProductName</p>
        <p>Nhân vật: @figure.Character.Name</p>
        <p>Series: @figure.Character.Series.Name</p>
        <p>Hãng sản xuất: @figure.Manufacture.Name</p>
        <p>Kích thước: @figure.Height cm</p>
        <p>Phát hành: @figure.ReleaseDate</p>
			@if (figure.Type == FigureType.Gundam)
			{
					<p>Loại Gundam: @figure.GundamType.GetDisplayText()</p>
			}
			else if (figure.Type == FigureType.ScaleFigure)
			{
				<p>Scale: @figure.Scale.GetDisplayText()</p>
			}
        <div class="info_ctn">          
            <img src="Image/package-box.png">
            <div>
                <span>Sản phẩm chính hãng từ Nhật Bản.</span>
            </div>
        </div>
        <div class="info_ctn">
            <img src="Image/fast.png">
            <div>
                <span>Miễn phí ship với các đơn hàng >1000K.</span>
            </div>
        </div>
        <div class="info_ctn">           
            <img src="Image/call.png">
            <div>
                <span>Vui lòng kiểm tra sản phẩm khi nhận bưu kiện.</span>
            </div>
        </div>
    </div>
</div>
 @if (relatedFigures != null && relatedFigures.Count > 0) {
<h1 class="other_product_title">Sản Phẩm Liên Quan</h1>
<div class="other_product_ctn">
    <div class="products" style="padding: 3rem">
		@foreach (var (rfig, i) in relatedFigures.Select((f, i) => (f, i)))
		{
			<div class="product_item">
				<div class="product_thumb">
					<a href="/figure/@rfig.Id">
						<img class="product_img" src="@rfig.Images.First()" alt="">
					</a>
					<a href="" class="add_cart">
						<span>Add To Cart</span>
						<img src="Image/cart-white.png">
					</a>
				</div>
				<div class="product_name_ctn">
					<a href="" class="product_name">@rfig.ProductName</a>
				</div>
				<div class="product_price">@string.Format("{0:n0}", rfig.Price)₫</div>
			</div>
		}
    </div>
</div>
		}
}
<BottomBar></BottomBar>
@code {
	[Parameter]
	public int Id { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState> authenticationStateTask { get; set; }
	private ClaimsPrincipal user = null;
	private string bigImgageSrc { get; set; }
	private Entities.Figure figure = null;
	private int quantity = 1;
	private List<Entities.Figure> relatedFigures = null;

	protected override async Task OnInitializedAsync()
	{
		user = (await authenticationStateTask).User;

		figure = await figRepo.GetFigureDetail(Id);
		if (figure == null)
		{
			UriHelper.NavigateTo("/");
		}

		relatedFigures = await figRepo.GetRelatedFigures(figure);
		bigImgageSrc = figure.Images[0];
	}

	protected override async Task OnParametersSetAsync()
	{
		await OnInitializedAsync();
		StateHasChanged();
	}

	protected void OnclickImg(int index){
		bigImgageSrc = figure.Images[index];
	}


	private async void AddToCart()
	{
		var state = await authenticationStateTask;
		var email = state.User.Claims.First(c => c.Type == ClaimTypes.Email).Value;
		await cartRepo.AddToCart(email, figure.Id, quantity);

		toastService.ShowSuccess("Đã thêm vào giỏ hàng.", s => { s.Timeout = 5;});
	}
}
