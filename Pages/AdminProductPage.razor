@page "/admin/product"
@inject FigureRepository FigureRepository;
@inject CharacterRepository CharacterRepository; 
@inject SeriesRepository SeriesRepository;
@inject ManufactureRepository ManufactureRepository;
@inject JPFigureContext context;
@using JPFigure.Pages.Shared
@using JPFigure.Entities.Enums
@using JPFigure.Extensions
@using JPFigure.Repositories
@using JPFigure.Repositories.Data.Inputs
<h4>Hàng Hóa</h4>
<div class="select_ctn">
    <span>Chọn loại sản phẩm: </span>
    <select @onchange="SelectOnChange">
        <option value=@FigureType.ScaleFigure> Scale Figure</option>
        <option value=@FigureType.Nendoroid> Nendoroid</option>
        <option value=@FigureType.Gundam> Gundam</option>
		<option value=@FigureType.Others> Khác</option>
    </select>
</div>
<div class="add_product_ctn">
    <div class="input_ctn">
        <div>
            <img src="Image/image.png">
			<input @bind="figureInput.Image1" placeholder="Image1 Link...">
        </div>
        <div>
            <img src="Image/image.png">
            <input @bind="figureInput.Image2" placeholder="Image2 Link...">
        </div>
        <div>
            <img src="Image/image.png">
            <input @bind="figureInput.Image3" placeholder="Image3 Link...">
        </div>
        <div>
            <img src="Image/image.png">
            <input @bind="figureInput.Image4" placeholder="Image4 Link...">
        </div>
        <div>
            <img src="Image/dog-tag.png">
			<input @bind="figureInput.ProductName" placeholder="Product Name...">
        </div>
        <div>
            <img src="Image/height.png">
            <input @bind="figureInput.Height" placeholder="Kích thước (đơn vị: mm)...">
        </div>
        <div>
            <img src="Image/release.png">
            <input @bind="figureInput.ReleaseDate" placeholder="Release Date (MM/DD/YYYY)...">
        </div>
        <div>
            <img src="Image/face-id.png">
			<SelectWithSearch Secret=@(characterOptions.Where(co => co.Value == figureInput.CharacterId.ToString()).FirstOrDefault())
				SelectedOptionChanged=@(o => figureInput.CharacterId = o != null ? int.Parse(o.Value) : -1)
							  PlaceHolder="Character ID..."
							  Disabled=@isProcessing Options=@characterOptions />
        </div>
        <div>
            <img src="Image/boxes.png">
            <input @bind="figureInput.StockCount" placeholder="Instock...">
        </div>
        <div>
            <img src="Image/id-card.png">
			<SelectWithSearch Secret=@(manufactureOptions.Where(co => co.Value == figureInput.ManufactureId.ToString()).FirstOrDefault())
				SelectedOptionChanged=@(o => figureInput.ManufactureId = o != null ? int.Parse(o.Value) : -1)
							  PlaceHolder="Manufacture ID..."
							  Disabled=@isProcessing Options=@manufactureOptions/>
        </div>
        <div>
            <img src="Image/price-tag.png">
			<input @bind="figureInput.Price" placeholder="Price...">
        </div>
        <div>
            <img src="Image/scale.png">
			<SelectWithSearch Secret=@(scaleOptions.Where(co => co.DisplayText == figureInput.Scale?.GetDisplayText()).FirstOrDefault())
							  SelectedOptionChanged=@(o => figureInput.Scale = o != null ? Enum.Parse<FigureScale>(o.Value) : FigureScale.NonScale)
							  PlaceHolder=@(scaleDisabled ? FigureScale.NonScale.GetDisplayText() : "Scale...")
							  Disabled=@(isProcessing || scaleDisabled) Options=@scaleOptions/>
        </div>
        <div>
            <img src="Image/robot.png">
			<SelectWithSearch Secret=@(gundamOptions.Where(co => co.DisplayText == figureInput.GundamType?.GetDisplayText()).FirstOrDefault())
							  SelectedOptionChanged=@(o => figureInput.GundamType = o != null ? Enum.Parse<GundamType>(o.Value) : GundamType.NonGundam)
							  PlaceHolder=@(gundamTypeDisabled ? GundamType.NonGundam.GetDisplayText() : "Gundam Type...")
							  Disabled=@(isProcessing || gundamTypeDisabled) Options=@gundamOptions />
        </div>
    </div>
	<div class="product_id_ctn">
		<img src="Image/id.png">
		<input style="border-bottom: 2px solid red" placeholder="Product ID..." type="number" @oninput=@((e) => {
			int result = -1;
			bool success = int.TryParse((string?) e.Value, out result);

			if (success) {
				editId = result;
				var figure = context.Figures.Where(f => f.Id == editId).FirstOrDefault();
			   editFigureExists = figure != null;

			   if (editFigureExists) {
				   figureInput.Height = figure.Height;
				   figureInput.Image1 = figure.Images.Length >= 1 ? figure.Images[0] : null;
				   figureInput.Image2 = figure.Images.Length >= 2 ? figure.Images[1]: null;
				   figureInput.Image3 = figure.Images.Length >= 3 ? figure.Images[2]: null;
				   figureInput.Image4 = figure.Images.Length >= 4 ? figure.Images[3]: null;
				   figureInput.ManufactureId = figure.ManufactureId;
				   figureInput.Price = figure.Price;
				   figureInput.ProductName = figure.ProductName;
				   figureInput.ReleaseDate = figure.ReleaseDate;
				   figureInput.StockCount = figure.StockCount;
				   figureInput.CharacterId = figure.CharacterId;
				   figureInput.Scale = figure.Scale;
				   figureInput.GundamType = figure.GundamType;
				   selectedFigureType = figure.Type;
			   UpdateInputFields();
			   }
			   else {
			   figureInput = new();
			   }

			}
			else {
				figureInput = new();
				editFigureExists = false;
			}
		})/>
	</div>
    <div class="button_ctn">
		<button disabled=@(!editFigureExists) @onclick=@(async () => {
				var images = new List<string> { figureInput.Image1, figureInput.Image2 };
				if (!string.IsNullOrEmpty(figureInput.Image3))
				{
				images.Add(figureInput.Image3);
				}
				if (!string.IsNullOrEmpty(figureInput.Image4))
				{
				images.Add(figureInput.Image4);
				}
				var figure = context.Figures.Where(f => f.Id == editId).FirstOrDefault();
				figure.CharacterId = figureInput.CharacterId.Value;
				figure.Height = figureInput.Height.Value;
				figure.Images = images.ToArray();
				figure.ManufactureId = figureInput.ManufactureId.Value;
				figure.Price = figureInput.Price.Value;
				figure.ProductName = figureInput.ProductName;
				figure.ReleaseDate = figureInput.ReleaseDate.Value;
				figure.StockCount = figureInput.StockCount.Value;
				figure.Scale = figureInput.Scale.Value;
				figure.GundamType = figureInput.GundamType.Value;

				context.Figures.Update(figure);
				await context.SaveChangesAsync();
				ShowNotification();
			
		})>Sửa</button>
		<button disabled=@(!editFigureExists) @onclick=@(async () => {
			context.Figures.Remove(new Entities.Figure() {Id = editId.Value});
			await context.SaveChangesAsync();
			ShowNotification();
			editId = null;
		})
		>Xóa</button>
		<button @onclick=OnAddFigure disabled=@(FigureButtonsDisabled || editFigureExists)>Thêm</button>
    </div>
    <div class="input_extra_ctn">
        <div class="extra_part_ctn">
            <h4 style="font-size: 20px">Nhân Vật</h4>
            <div>
                <img src="Image/dog-tag.png">
				<input @bind=characterInput.Name placeholder="Character Name..." disabled=@isProcessing>
            </div>
            <div>
                <img src="Image/badge.png">
				<SelectWithSearch 
					SelectedOptionChanged=@(o => characterInput.SeriesId = o != null ? int.Parse(o.Value) : -1)
					PlaceHolder="Series..."
					Disabled=@isProcessing Options=@seriesOptions />
            </div>
            <div class="button_ctn">
                <button @onclick=OnAddCharacter disabled=@CharacterButtonsDisabled>Thêm</button>
            </div>
        </div>
        <div class="extra_part_ctn">
            <h4 style="font-size: 20px">Series</h4>
            <div>
                <img src="Image/serialized-books.png">
				<input @bind=seriesInput.Name placeholder="Series..." disabled=@isProcessing>
            </div>
            <div class="button_ctn">
                <button @onclick=OnAddSeries disabled="@SeriesButtonsDisabled">Thêm</button>
            </div>
        </div>
        <div class="extra_part_ctn">
            <h4 style="font-size: 20px">Hãng Sản Xuất</h4>
            <div>
                <img src="Image/brand-image.png">
				<input @bind=manufactureInput.Name placeholder="Producer...">
            </div>
            <div class="button_ctn">
				<button disabled="@ManufactureButtonsDisabled" @onclick=OnAddManufacture>Thêm</button>
            </div>
        </div>
		<div hidden=@hideNotification class="notification">Xử lý thành công!</div>
    </div>
</div>
<div class="search_ctn">
	<form>
		<input type="text" placeholder="Tìm kiếm sản phẩm...?" />
		<button type="submit">
			<img src="Image/magnifying-glass.png">
		</button>
		<div class="sort_title">
			<label>Sắp xếp:</label>
		</div>
		<div class="select_container">
			<select class="sort">
				<option value="news">Mới Nhất</option>
				<option value="oldest">Cũ Nhất</option>
			</select>
		</div>
	</form>
</div>
<div class="table_ctn">
    <table>
        <tr>
            <th>STT</th>
			<th>Hình ảnh</th>
            <th>Email</th>
            <th>Địa Chỉ</th>
            <th>Tổng hàng đã mua</th>
        </tr>
        <tr>
            <td>1</td>
			<td style="display:flex; justify-content: center; padding: 5px 0">
				<div class="product_img_ctn">
					<img class="product_img" src="Image/product1,1.png"/>
				</div>
			</td>
            <td>123@gmail.com</td>
            <td>Ho Chi Minh</td>
            <td>10</td>
        </tr>
    </table>
</div>
@code {
	private bool gundamTypeDisabled = false;
	private bool scaleDisabled = false;
	private FigureType selectedFigureType = FigureType.ScaleFigure;
	private FigureInputData figureInput = new();
	private CharacterInput characterInput = new();
	private SeriesInput seriesInput = new();
	private ManufactureInput manufactureInput = new();

	private List<SelectWithSearch.Option> characterOptions = new();
	private List<SelectWithSearch.Option> seriesOptions = new();
	private List<SelectWithSearch.Option> manufactureOptions = new();
	private List<SelectWithSearch.Option> scaleOptions = new();
	private List<SelectWithSearch.Option> gundamOptions = new();

	private bool isProcessing = false;
	private bool hideNotification = true;

	private int? editId = null;
	private bool editFigureExists = false;

	private bool CharacterButtonsDisabled
	{
		get => isProcessing || String.IsNullOrEmpty(characterInput.Name) || characterInput.SeriesId <= 0;
	}

	private bool SeriesButtonsDisabled
	{
		get => isProcessing || String.IsNullOrEmpty(seriesInput.Name);
	}

	private bool ManufactureButtonsDisabled
	{
		get => isProcessing || String.IsNullOrEmpty(manufactureInput.Name);
	}

	private bool FigureButtonsDisabled
	{
		get {
			var invalid = (string str) => String.IsNullOrEmpty(str);
			var isNull = (int? num) => num == null;
			var invalidId = (int? num) => num <= 0;
			var fi = figureInput;
			return isProcessing || invalid(fi.ProductName) || invalid(fi.Image1) ||
			isNull(fi.Price) || isNull(fi.Height) || isNull(fi.StockCount) ||
			(!scaleDisabled && fi.Scale == null) || fi.ReleaseDate == null || invalidId(fi.CharacterId) || invalidId(fi.ManufactureId) ||
			(!gundamTypeDisabled && fi.GundamType == null);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		UpdateInputFields();
		await UpdateOptions();
	}

	private async Task UpdateOptions() {
		characterOptions = (await CharacterRepository.GetAllCharacters()).Select(
			c => new SelectWithSearch.Option() {
				Value = c.Id.ToString(),
				DisplayText = c.Name
		}).ToList();

		seriesOptions = (await SeriesRepository.GetAllSeries()).Select(
			c => new SelectWithSearch.Option() {
				Value = c.Id.ToString(),
				DisplayText = c.Name
		}).ToList();

		manufactureOptions = (await ManufactureRepository.GetAllManufactures()).Select(
			c => new SelectWithSearch.Option() {
				Value = c.Id.ToString(),
				DisplayText = c.Name
		}).ToList();

		scaleOptions = Enum.GetValues<FigureScale>().Select(
			e => new SelectWithSearch.Option() {
				Value = e.ToString(),
				DisplayText = e.GetDisplayText()
			}
		).ToList();
		gundamOptions = Enum.GetValues<GundamType>().Select(
			e => new SelectWithSearch.Option()
				{
					Value = e.ToString(),
					DisplayText = e.GetDisplayText()
				}
		).ToList();
	}


	void UpdateInputFields()
	{
		scaleDisabled = selectedFigureType != FigureType.ScaleFigure;
		gundamTypeDisabled = selectedFigureType != FigureType.Gundam;

		if (scaleDisabled) {
			figureInput.Scale = FigureScale.NonScale;
		}

		if (gundamTypeDisabled) {
			figureInput.GundamType = GundamType.NonGundam;
		}
	}

	void SelectOnChange(ChangeEventArgs e)
	{
		Enum.TryParse<FigureType>(e.Value!.ToString(), out selectedFigureType);
		UpdateInputFields();
	}

	private async Task OnAddCharacter()
	{
		isProcessing = true;
		await CharacterRepository.AddCharacter(characterInput);
		isProcessing = false;
		characterInput = new();

		await NotifyAndUpdateOptions();
	}

	private async Task OnAddSeries() {
		isProcessing = true;
		await SeriesRepository.AddSeries(seriesInput);
		isProcessing = false;
		seriesInput = new();

		await NotifyAndUpdateOptions();
	}

	private async Task OnAddManufacture()
	{
		isProcessing = true;
		await ManufactureRepository.AddManufacture(manufactureInput);
		isProcessing = false;
		manufactureInput = new();

		await NotifyAndUpdateOptions();
	}

	private async Task OnAddFigure() {
		isProcessing = true;

		var images = new List<string> { figureInput.Image1, figureInput.Image2 };
		if (!string.IsNullOrEmpty(figureInput.Image3))
		{
			images.Add(figureInput.Image3);
		}

		if (!string.IsNullOrEmpty(figureInput.Image4))
		{
			images.Add(figureInput.Image4);
		}

		T createAndPopulateFigure<T>(Action<T, FigureInputData> manualHandler = null) where T : FigureInput, new()
		{
			T figure = new T();
			figure.CharacterId = figureInput.CharacterId.Value;
			figure.Height = figureInput.Height.Value;
			figure.Images = images.ToArray();
			figure.ManufactureId = figureInput.ManufactureId.Value;
			figure.Price = figureInput.Price.Value;
			figure.ProductName = figureInput.ProductName;
			figure.ReleaseDate = figureInput.ReleaseDate.Value;
			figure.StockCount = figureInput.StockCount.Value;
			manualHandler?.Invoke(figure, figureInput);
			return figure;
		}

		var task = selectedFigureType switch
		{
			FigureType.Nendoroid => FigureRepository.AddNendoroidFigure(
				createAndPopulateFigure<FigureInput>()
			),
			FigureType.Gundam => FigureRepository.AddGundamFigure(
				createAndPopulateFigure<GundamFigureInput>((f, fi) => {
					f.GundamType = fi.GundamType.Value;
				}) 
			),
			FigureType.ScaleFigure => FigureRepository.AddScaleFigure(
				createAndPopulateFigure<ScaleFigureInput>((f, fi) => {
					f.Scale = fi.Scale.Value;
				})
			),
			FigureType.Others => FigureRepository.AddOtherFigure(
				createAndPopulateFigure<FigureInput>()
			),
		};

		await task;

		isProcessing = false;
		figureInput.ProductName = "";

		await NotifyAndUpdateOptions();
	}

	private async Task NotifyAndUpdateOptions() {
		var notifyTask = ShowNotification();
		await UpdateOptions();
		await notifyTask;
	}

	private async Task ShowNotification() {
		hideNotification = false;
		StateHasChanged();
		await Task.Delay(4000);
		hideNotification = true;
		StateHasChanged();
	}


	private class FigureInputData {
		public int? StockCount { get; set; }
		public string? ProductName { get; set; }
		public int? CharacterId { get; set; }
		public int? ManufactureId { get; set; }
		public int? Height { get; set; }
		public DateOnly? ReleaseDate { get; set; }
		public int? Price { get; set; }
		public string? Image1 { get; set; }
		public string? Image2 { get; set; }
		public string? Image3 { get; set; }
		public string? Image4 { get; set; }
		public FigureScale? Scale { get; set; }
		public GundamType? GundamType { get; set; }
	}
}
	