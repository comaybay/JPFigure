<input @onchange=OnInputChanged @bind-value:event="oninput" @bind-value=_DisplayText list=@id placeholder=@PlaceHolder disabled=@Disabled>
<datalist id=@id>
	<option>Tất cả</option>
	@foreach (var option in Options)
	{
		<option>@option.DisplayText</option>
	}
</datalist>  

@code {
	private string id = Guid.NewGuid().ToString();

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string PlaceHolder { get; set; } = "Tất cả";

	[Parameter]
	public List<Option> Options { get; set; } = null!;

	private Option? _previousSelectedOption = null;

	[Parameter]
	public EventCallback<Option?> SelectedOptionChanged { get; set; }

	private string _DisplayText { get; set; } = "";

	protected override void OnParametersSet()
	{
		if (Disabled) {
			_DisplayText = "";
		}
	}

	private async Task OnInputChanged(ChangeEventArgs e)
	{
		var value = e.Value?.ToString()?.Trim() ?? "";

		_DisplayText = "";
		var option = Options.Find(o => o.DisplayText == value);
		if (option != null)
		{
			PlaceHolder = option.DisplayText;
			_previousSelectedOption = option;
			await SelectedOptionChanged.InvokeAsync(option);
		}
		else if (String.IsNullOrEmpty(value) || value == "Tất cả")
		{
			PlaceHolder = "Tất cả";
			_previousSelectedOption = null;
			await SelectedOptionChanged.InvokeAsync(null);
		}
		else {
			PlaceHolder = _previousSelectedOption?.DisplayText ?? "";
		}
	}

	public class Option {
		public string Value { get; set; } = null!;
		public string DisplayText { get; set; } = null!;
	}
}
