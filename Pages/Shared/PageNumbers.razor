<div class="page_navigate_ctn">
	<nav aria-label="Page navigation example">
		<ul class="pagination">
			<li class="page-item">
				<a class="page-link" aria-label="Previous" @onclick=@(() => OnPageChanged(1))>
					<span aria-hidden="true">&laquo;</span>
					<span class="sr-only"></span>
				</a>
			</li>
			@if (PageFrom != 1)
			{
				<li class="page-item"><span class="page-link">...</span></li>
			}
			@for (int i = PageFrom; i <= PageTo; i++)
			{
				var index = i;

				@if (Page == i)
				{
					<li class="page-item">
						<a class="page-link" style="background-color:#0d6efd; color:white" @onclick=@(() => OnPageChanged(index))>
							@index
						</a>
					</li>
				}
				else
				{
					<li class="page-item">
						<a class="page-link" @onclick=@(() => OnPageChanged(index))>
							@index
						</a>
					</li>
				}
			}
			@if (PageTo != NumberOfPages)
			{
				<li class="page-item"><span class="page-link">...</span></li>
			}
			<li class="page-item">
				<a class="page-link" aria-label="Next"
				   @onclick=@(() => OnPageChanged(NumberOfPages))>
					<span aria-hidden="true">&raquo;</span>
					<span class="sr-only"></span>
				</a>
			</li>
		</ul>
	</nav>
</div>


@code {
	[Parameter]
	public int NumberOfPages { get; set; }

	[Parameter]
	public int Page { get; set; }

	[Parameter]
	public EventCallback<int> PageChanged { get; set; }

	private int PageFrom { get => Page <= NumberOfPages - 2 ? Math.Max(Page - 2, 1) : Math.Max(NumberOfPages - 5, 1); }
	private int PageTo { get => Page > 3 ? Math.Min(Page + 2, NumberOfPages) : Math.Min(NumberOfPages, 5); }


	private async Task OnPageChanged(int page)
	{
		await PageChanged.InvokeAsync(page);
	}
}