<input @onchange=OnInputChanged @bind-value:event="oninput" @bind-value=_DisplayText list=@Id placeholder=@PlaceHolder disabled=@Disabled>
<datalist id=@Id>
	@foreach (var option in Options)
	{
		<option value="@option.Value">@option.DisplayText</option>
	}
</datalist>  

@code {
	[Parameter]
	public string Id { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string PlaceHolder { get; set; }

	[Parameter]
	public List<Option> Options { get; set; } = null!;

	private Option? _previousSelectedOption = null;

	[Parameter]
	public EventCallback<Option?> SelectedOptionChanged { get; set; }

	private string _DisplayText { get; set; } = "";

	protected override void OnParametersSet()
	{
		if (Disabled) {
			_DisplayText = "";
		}
	}

	private async Task OnInputChanged(ChangeEventArgs e)
	{
		var value = e.Value?.ToString()?.Trim() ?? "";

		var option = Options.Find(o => o.Value == value || o.DisplayText == value);
		if (option != null || String.IsNullOrEmpty(value))
		{
			_DisplayText = option?.DisplayText ?? "";
			_previousSelectedOption = option;
			await SelectedOptionChanged.InvokeAsync(option);
		}
		else {
			_DisplayText = _previousSelectedOption?.DisplayText ?? "";
		}
	}

	public class Option {
		public string Value { get; set; } = null!;
		public string DisplayText { get; set; } = null!;
	}
}
